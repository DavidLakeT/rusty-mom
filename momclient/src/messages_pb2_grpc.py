# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import messages_pb2 as messages__pb2


class MessageStreamStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubscribeToChannel = channel.unary_stream(
                '/messages.MessageStream/SubscribeToChannel',
                request_serializer=messages__pb2.SubscriptionRequest.SerializeToString,
                response_deserializer=messages__pb2.Message.FromString,
                )
        self.PushToQueue = channel.unary_unary(
                '/messages.MessageStream/PushToQueue',
                request_serializer=messages__pb2.Push.SerializeToString,
                response_deserializer=messages__pb2.PushOkResponse.FromString,
                )
        self.CreateQueue = channel.unary_unary(
                '/messages.MessageStream/CreateQueue',
                request_serializer=messages__pb2.CreateQueueRequest.SerializeToString,
                response_deserializer=messages__pb2.CreateQueueOkResponse.FromString,
                )
        self.DeleteQueue = channel.unary_unary(
                '/messages.MessageStream/DeleteQueue',
                request_serializer=messages__pb2.DeleteQueueRequest.SerializeToString,
                response_deserializer=messages__pb2.DeleteQueueOkResponse.FromString,
                )
        self.CreateChannel = channel.unary_unary(
                '/messages.MessageStream/CreateChannel',
                request_serializer=messages__pb2.CreateChannelRequest.SerializeToString,
                response_deserializer=messages__pb2.CreateChannelResponse.FromString,
                )
        self.DeleteChannel = channel.unary_unary(
                '/messages.MessageStream/DeleteChannel',
                request_serializer=messages__pb2.DeleteChannelRequest.SerializeToString,
                response_deserializer=messages__pb2.DeleteChannelOkResponse.FromString,
                )


class MessageStreamServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SubscribeToChannel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PushToQueue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateQueue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteQueue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateChannel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteChannel(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MessageStreamServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubscribeToChannel': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeToChannel,
                    request_deserializer=messages__pb2.SubscriptionRequest.FromString,
                    response_serializer=messages__pb2.Message.SerializeToString,
            ),
            'PushToQueue': grpc.unary_unary_rpc_method_handler(
                    servicer.PushToQueue,
                    request_deserializer=messages__pb2.Push.FromString,
                    response_serializer=messages__pb2.PushOkResponse.SerializeToString,
            ),
            'CreateQueue': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateQueue,
                    request_deserializer=messages__pb2.CreateQueueRequest.FromString,
                    response_serializer=messages__pb2.CreateQueueOkResponse.SerializeToString,
            ),
            'DeleteQueue': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteQueue,
                    request_deserializer=messages__pb2.DeleteQueueRequest.FromString,
                    response_serializer=messages__pb2.DeleteQueueOkResponse.SerializeToString,
            ),
            'CreateChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateChannel,
                    request_deserializer=messages__pb2.CreateChannelRequest.FromString,
                    response_serializer=messages__pb2.CreateChannelResponse.SerializeToString,
            ),
            'DeleteChannel': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteChannel,
                    request_deserializer=messages__pb2.DeleteChannelRequest.FromString,
                    response_serializer=messages__pb2.DeleteChannelOkResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'messages.MessageStream', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MessageStream(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SubscribeToChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/messages.MessageStream/SubscribeToChannel',
            messages__pb2.SubscriptionRequest.SerializeToString,
            messages__pb2.Message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PushToQueue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/messages.MessageStream/PushToQueue',
            messages__pb2.Push.SerializeToString,
            messages__pb2.PushOkResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateQueue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/messages.MessageStream/CreateQueue',
            messages__pb2.CreateQueueRequest.SerializeToString,
            messages__pb2.CreateQueueOkResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteQueue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/messages.MessageStream/DeleteQueue',
            messages__pb2.DeleteQueueRequest.SerializeToString,
            messages__pb2.DeleteQueueOkResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CreateChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/messages.MessageStream/CreateChannel',
            messages__pb2.CreateChannelRequest.SerializeToString,
            messages__pb2.CreateChannelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteChannel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/messages.MessageStream/DeleteChannel',
            messages__pb2.DeleteChannelRequest.SerializeToString,
            messages__pb2.DeleteChannelOkResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
